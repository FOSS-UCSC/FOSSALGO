#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *leftChild;
	struct node *rightChild;
};
int ch;
struct node *root=NULL;
struct node *create();
int heightOfTree(struct node *root);
void insertData(struct node *root,struct node *temp);
void printfLevelOrder(struct node *root);
void printfLevel(struct node *root,int i);
void inOrder(struct node *root);
void preOrder(struct node *root);
void postOrder(struct node *root);
int findMax( struct node *root);
int findMin( struct node *root);


int main(){
	struct node* temp;
	printf("Enter Your Number of Nodes:");
	scanf("%d",&ch);
	int max;
	do{
		temp=create();
		if(root==NULL){
			root=temp;
		}else{
			insertData(root,temp);
		}
		ch--;
	}while(ch>0);
	printf("Height of the tree:");
    max=heightOfTree(root);
    printf("%d\n",max);
    printfLevelOrder(root);
    printf("\n");
    printf("Maximum Value is:%d",findMax(root));
    printf("\n");
    printf("Minimum Value is:%d",findMin(root));
    printf("\n");
    printf("Binary PreOrder List is:");
	preOrder(root);
	printf("\n");
	printf("Binary InOrder List is:");
	inOrder(root);
	printf("\n");
	printf("Binary PostOrder List is:");
	postOrder(root);
    
    return 0;
}
struct node *create(){
	struct node *temp;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("Enter Your Data:");
	scanf("%d",&temp->data);
	temp->leftChild=NULL;
	temp->rightChild=NULL;
	return temp;
}
void insertData(struct node *root,struct node *temp){
	if(root==NULL){
		root=temp;
	}else{
		if(temp->data < root->data){
			if(root->leftChild!=NULL){
				insertData(root->leftChild,temp);
			}else{
				root->leftChild=temp;
			}
		}
		 if(temp->data > root->data){
			if(root->rightChild!=NULL){
				insertData(root->rightChild,temp);
			}else{
				root->rightChild=temp;
			}
		}
	}
}
int heightOfTree(struct node *root){
	int leftHeight,rightHeight,max;
	if(root==NULL){
		return 0;
	}
	leftHeight=heightOfTree(root->leftChild);
	rightHeight=heightOfTree(root->rightChild);
	
	if(leftHeight>rightHeight){
		max=leftHeight+1;
		return max;
		
	}else{
		max=rightHeight+1;
		return max;
	}
	
	
}
void printfLevelOrder(struct node *root){
	int h=heightOfTree(root);
	int i;
	for(i=1;i<=h;i++){
		printfLevel(root,i);
	}
}
void printfLevel(struct node *root,int level){
	if(root==NULL){
		return;
	}
	if(level==1){
		printf("%d-->",root->data);
	}else if(level>1){
		printfLevel(root->leftChild,level-1);
		printfLevel(root->rightChild,level-1);
	}
}
void preOrder(struct node *root){
	if(root!=NULL){
		printf("%d-->",root->data);
		preOrder(root->leftChild);
		preOrder(root->rightChild);
	}
}
void inOrder(struct node *root){
	if(root!=NULL){
		inOrder(root->leftChild);
		printf("%d-->",root->data);
		inOrder(root->rightChild);
		
	}
}
void postOrder(struct node *root){
	if(root!=NULL){
		postOrder(root->leftChild );
		postOrder(root->rightChild);
		printf("%d-->",root->data);
	}
}
int findMax(struct node *root){
  if(root==NULL){
  	return 0;
  }	
  int max1=root->data;
  int max2=findMax(root->leftChild);
  int max3=findMax(root->rightChild);
  if(max2>max1){
  	max1=max2;
  }
  if(max3>max1){
  	max1=max3;
  }
  return max1;
}
int findMin(struct node *root){
	if(root==NULL){
		return INT_MAX;
	}
	int min1=root->data;
	int min2=findMin(root->leftChild);
	int min3=findMin(root->rightChild);
	if(min1>min2){
		min1=min2;
	}
	if(min1>min3){
		min1=min3;
	}
	return min1;
}


